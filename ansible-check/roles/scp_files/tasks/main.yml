- name: "Create directories and check files"
  shell: |
      if [ ! -d "{{ apps[service].dest }}/{{ service }}" ];  then
         mkdir "{{ apps[service].dest }}/{{ service }}"
      fi
      if [ -f "{{ apps[service].dest }}/{{ service }}/{{ apps[service].name }}.zip" ]; then
         rm -f "{{ apps[service].dest }}/{{ service }}/{{ apps[service].name }}.zip"
      fi
      if [ -d "{{ apps[service].dest }}/{{ service }}/{{ apps[service].name }}" ]; then
         rm -rf "{{ apps[service].dest }}/{{ service }}/{{ apps[service].name }}"
      fi
  register: create_status
  failed_when: create_status.rc != 0

- name: "scp {{ service }} package"
  copy:
    src: "{{ apps[service].src }}"
    dest: "{{ apps[service].dest }}/{{ service }}"
    backup: no
  register: scp_status
  failed_when: scp_status.changed != true

- name: "Check the {{ service }} status"
  stat:
    path: "{{ apps[service].dest }}/{{ service }}/{{ apps[service].name }}.zip"
  register: file_status

- name: "Print {{ service }} transmission result"
  debug:
    msg: "scp succeeded: {{ apps[service].dest }}/{{ service }}/{{ apps[service].name }}.zip"
  when: file_status.stat.exists == True

- name: "Unzip {{ service }} file"
  shell: |
      cd "{{ apps[service].dest }}/{{ service }}"
      unzip "{{ apps[service].name }}.zip"
  register: unzip_status
  failed_when: unzip_status.rc != 0
